{"ast":null,"code":"var _jsxFileName = \"/Users/pattonparham/Desktop/Coding-Boot-Camp-Work/HW-Assignments/Final-Project/audio-generator/client/src/SoundCloud.js\";\n\n/**\n * Module dependencies\n */\nimport React from 'react';\nimport createWidget from './createWidget';\n/**\n * Create a new `SoundCloud` component.\n *\n * This is essentially a glorified wrapper over the existing\n * HTML5 widget from SoundCloud. Programmatic control not included.\n *\n * NOTE: Changing `props.url` will cause the component to load it.\n * Unfortunately, SoundCloud adds an entry to `window.history` every time\n * a new url is loaded, so changing `props.url` __will__ break the back button.\n */\n\nclass SoundCloud extends React.Component {\n  /**\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this._internalWidget = null;\n  }\n\n  componentDidMount() {\n    this._createWidget();\n  }\n  /**\n   * @param {Object} nextProps\n   * @returns {Boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.url !== this.props.url;\n  }\n\n  componentDidUpdate() {\n    this._reloadWidget();\n  }\n\n  componentWillUnmount() {\n    this._unbindEvents();\n  }\n  /**\n   * Called on the initial render, this uses the rendered iframe\n   * as a base for creating a new `_internalWidget`.\n   */\n\n\n  _createWidget() {\n    createWidget(this.props.id, widget => {\n      this._setupWidget(widget);\n\n      this._reloadWidget();\n    });\n  }\n  /**\n   * Integrate a newly created `widget` with the rest of the component.\n   *\n   * @param {Object} Widget\n   */\n\n\n  _setupWidget(widget) {\n    this._internalWidget = widget;\n\n    this._bindEvents();\n  }\n  /**\n   * This is the only way to manipulate the embedded iframe, it's essentially\n   * refreshed and reloaded.\n   *\n   * NOTE: SoundCloud adds an entry to `window.history` after reloading. This is\n   * __really__ annoying, but unavoidable at the moment, so basically every\n   * time the url changes it breaks the back button. Super bummer.\n   */\n\n\n  _reloadWidget() {\n    this._internalWidget.load(this.props.url, this.props.opts);\n  }\n  /**\n   * Listen for events coming from `widget`, and pass them up the\n   * chain to the parent component if needed.\n   */\n\n\n  _bindEvents() {\n    this._internalWidget.bind(window.SC.Widget.Events.PLAY, this.props.onPlay);\n\n    this._internalWidget.bind(window.SC.Widget.Events.PAUSE, this.props.onPause);\n\n    this._internalWidget.bind(window.SC.Widget.Events.FINISH, this.props.onEnd);\n  }\n  /**\n   * Remove all event bindings.\n   */\n\n\n  _unbindEvents() {\n    this._internalWidget.unbind(window.SC.Widget.Events.PLAY);\n\n    this._internalWidget.unbind(window.SC.Widget.Events.PAUSE);\n\n    this._internalWidget.unbind(window.SC.Widget.Events.FINISH);\n  }\n  /**\n   * @returns {Object}\n   */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"iframe\", {\n      id: this.props.id,\n      width: \"100%\",\n      height: this.props.height || (this.props.opts.visual ? '450' : '166'),\n      scrolling: \"no\",\n      frameBorder: \"no\",\n      src: \"https://w.soundcloud.com/player/?url=https://soundcloud.com/waterchildmusic/boondocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nSoundCloud.propTypes = {\n  // url to play. It's kept in sync, changing it will\n  // cause the widget to refresh and play the new url.\n  url: React.PropTypes.string.isRequired,\n  // custom ID for widget iframe element\n  id: React.PropTypes.string,\n  height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n  // widget parameters for appearance and auto play.\n  opts: React.PropTypes.objectOf(React.PropTypes.bool),\n  // event subscriptions\n  onPlay: React.PropTypes.func,\n  onPause: React.PropTypes.func,\n  onEnd: React.PropTypes.func\n};\nSoundCloud.defaultProps = {\n  id: 'react-sc-widget',\n  opts: {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {}\n};\n/**\n * Expose `SoundCloud` component\n */\n\nexport default SoundCloud;","map":{"version":3,"sources":["/Users/pattonparham/Desktop/Coding-Boot-Camp-Work/HW-Assignments/Final-Project/audio-generator/client/src/SoundCloud.js"],"names":["React","createWidget","SoundCloud","Component","constructor","props","_internalWidget","componentDidMount","_createWidget","shouldComponentUpdate","nextProps","url","componentDidUpdate","_reloadWidget","componentWillUnmount","_unbindEvents","id","widget","_setupWidget","_bindEvents","load","opts","bind","window","SC","Widget","Events","PLAY","onPlay","PAUSE","onPause","FINISH","onEnd","unbind","render","height","visual","propTypes","PropTypes","string","isRequired","oneOfType","number","objectOf","bool","func","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Module dependencies\n */\n\nimport React from 'react';\nimport createWidget from './createWidget';\n\n/**\n * Create a new `SoundCloud` component.\n *\n * This is essentially a glorified wrapper over the existing\n * HTML5 widget from SoundCloud. Programmatic control not included.\n *\n * NOTE: Changing `props.url` will cause the component to load it.\n * Unfortunately, SoundCloud adds an entry to `window.history` every time\n * a new url is loaded, so changing `props.url` __will__ break the back button.\n */\n\nclass SoundCloud extends React.Component {\n\n  /**\n   * @param {Object} props\n   */\n\n  constructor(props) {\n    super(props);\n    this._internalWidget = null;\n  }\n\n  componentDidMount() {\n    this._createWidget();\n  }\n\n  /**\n   * @param {Object} nextProps\n   * @returns {Boolean}\n   */\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.url !== this.props.url;\n  }\n\n  componentDidUpdate() {\n    this._reloadWidget();\n  }\n\n  componentWillUnmount() {\n    this._unbindEvents();\n  }\n\n  /**\n   * Called on the initial render, this uses the rendered iframe\n   * as a base for creating a new `_internalWidget`.\n   */\n\n  _createWidget() {\n    createWidget(this.props.id, (widget) => {\n      this._setupWidget(widget);\n      this._reloadWidget();\n    });\n  }\n\n  /**\n   * Integrate a newly created `widget` with the rest of the component.\n   *\n   * @param {Object} Widget\n   */\n\n  _setupWidget(widget) {\n    this._internalWidget = widget;\n    this._bindEvents();\n  }\n\n  /**\n   * This is the only way to manipulate the embedded iframe, it's essentially\n   * refreshed and reloaded.\n   *\n   * NOTE: SoundCloud adds an entry to `window.history` after reloading. This is\n   * __really__ annoying, but unavoidable at the moment, so basically every\n   * time the url changes it breaks the back button. Super bummer.\n   */\n\n  _reloadWidget() {\n    this._internalWidget.load(this.props.url, this.props.opts);\n  }\n\n  /**\n   * Listen for events coming from `widget`, and pass them up the\n   * chain to the parent component if needed.\n   */\n\n  _bindEvents() {\n    this._internalWidget.bind(window.SC.Widget.Events.PLAY, this.props.onPlay);\n    this._internalWidget.bind(window.SC.Widget.Events.PAUSE, this.props.onPause);\n    this._internalWidget.bind(window.SC.Widget.Events.FINISH, this.props.onEnd);\n  }\n\n  /**\n   * Remove all event bindings.\n   */\n\n  _unbindEvents() {\n    this._internalWidget.unbind(window.SC.Widget.Events.PLAY);\n    this._internalWidget.unbind(window.SC.Widget.Events.PAUSE);\n    this._internalWidget.unbind(window.SC.Widget.Events.FINISH);\n  }\n\n  /**\n   * @returns {Object}\n   */\n\n  render() {\n    return (\n      <iframe id={this.props.id}\n              width=\"100%\"\n              height={this.props.height || (this.props.opts.visual ? '450' : '166')}\n              scrolling=\"no\"\n              frameBorder=\"no\"\n              src=\"https://w.soundcloud.com/player/?url=https://soundcloud.com/waterchildmusic/boondocks\"\n      />\n    );\n  }\n}\n\nSoundCloud.propTypes = {\n  // url to play. It's kept in sync, changing it will\n  // cause the widget to refresh and play the new url.\n  url: React.PropTypes.string.isRequired,\n\n  // custom ID for widget iframe element\n  id: React.PropTypes.string,\n\n  height: React.PropTypes.oneOfType([\n    React.PropTypes.string,\n    React.PropTypes.number,\n  ]),\n\n  // widget parameters for appearance and auto play.\n  opts: React.PropTypes.objectOf(React.PropTypes.bool),\n\n  // event subscriptions\n  onPlay: React.PropTypes.func,\n  onPause: React.PropTypes.func,\n  onEnd: React.PropTypes.func,\n};\n\nSoundCloud.defaultProps = {\n  id: 'react-sc-widget',\n  opts: {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n};\n\n/**\n * Expose `SoundCloud` component\n */\n\nexport default SoundCloud;"]},"metadata":{},"sourceType":"module"}